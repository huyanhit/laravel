/** * Created by anh_huy on 5/25/2018. */// class dispatch eventvar event_create = function (){    this.object = null;    this.action = null;    this.specialchars = '__';    this.function = [];    //set param 1: object is impacting, param 2: name of action create    this.set = function (object, action) {        this.object = object;        this.action = action;    };    //set functions had defined in layout    this.set_function = function (name, condition) {        this.function.push({name:name, condition:condition});    }    //call dispatch event. define functions create event    this.run = function () {        for (x in this.action){            switch (this.action[x].action){                case 'enable':                    if(!this.object.is(':disabled')){                        console.log(this.action[x].name+this.specialchars+'enable');                        document.dispatchEvent(new CustomEvent(this.action[x].name +this.specialchars+'enable', {detail: this.object}));                    }                    break;                case 'disable':                    if(this.object.is(':disabled')){                        console.log(this.action[x].name+this.specialchars+'disable');                        document.dispatchEvent(new CustomEvent(this.action[x].name +this.specialchars+'disable', {detail: this.object}));                    }                    break;                case 'show':                    if(this.object.is(':visible')){                        console.log(this.action[x].name+this.specialchars+'visible');                        document.dispatchEvent(new CustomEvent(this.action[x].name +this.specialchars+'visible', {detail: this.object}));                    }                    break;                case 'hide':                    if(this.object.is(':hidden')){                        console.log(this.action[x].name+this.specialchars+'hidden');                        document.dispatchEvent(new CustomEvent(this.action[x].name +this.specialchars+'hidden', {detail: this.object}));                    }                    break;                case 'empty':                    if(this.object.is('input') || this.object.is('select') || this.object.is('textarea', {detail: this.object})){                        if(this.object.val().trim() == ''){                            document.dispatchEvent(new CustomEvent(this.action[x].name+this.specialchars+'empty', {detail: this.object}));                        }                    }else{                        if(this.object.text().trim() == ''){                            console.log(this.action[x].name+this.specialchars+'empty');                            document.dispatchEvent(new CustomEvent(this.action[x].name+this.specialchars+'empty', {detail: this.object}));                        }                    }                    break;                case 'has_value':                    if(this.object.is('select')){                        if(!(this.object.val().trim() == '')){                            console.log(this.action[x].name+this.specialchars+'has_value');                            document.dispatchEvent(new CustomEvent(this.action[x].name+this.specialchars+'has_value', {detail: this.object}));                        }                    }else{                        if(!(this.object.val().trim() == '') || !(this.object.text().trim() == '')){                            console.log(this.action[x].name+this.specialchars+'has_value');                            document.dispatchEvent(new CustomEvent(this.action[x].name+this.specialchars+'has_value', {detail: this.object}));                        }                    }                    break;                case 'check':                    if(this.object.is(':checked')){                        console.log(this.action[x].name+this.specialchars+'check');                        document.dispatchEvent(new CustomEvent(this.action[x].name+this.specialchars+'check', {detail: this.object}));                    }                    break;                case 'un_check':                    if(!this.object.is(':checked')){                        console.log(this.action[x].name+this.specialchars+'un_check');                        document.dispatchEvent(new CustomEvent(this.action[x].name+this.specialchars+'un_check', {detail: this.object}));                    }                    break;                case 'choose':                    if(this.object.val().trim() != ''){                        console.log(this.action[x].name+this.specialchars+'choose');                        document.dispatchEvent(new CustomEvent(this.action[x].name+this.specialchars+'choose', {detail: this.object}));                    }                    break;            }            for(x in this.function){                if ((this.action[x].action == this.function[x].name) && (this.function[x].condition.apply({create:$(this.action[x].name)}) == true)) {                    console.log(this.action[x].name+this.specialchars+this.action[x].action);                    document.dispatchEvent(new CustomEvent(this.action[x].name+this.specialchars+this.action[x].action, {detail: this.object}));                }            }        }    };};// class listen eventvar event_listen = function (){    this.object = null;    this.listen = [];    this.specialchars = '__';    this.function = [];    this.condition = [];    //set param 1: object is listening, param 2: name of action is listening    this.set = function (object, listen) {        this.object = object;        this.listen = listen;    };    //set functions had defined in layout    this.set_function = function (name, condition) {        this.function.push({name:name, condition:condition, loop:''});    }    //call listen event. define functions listen event    this.run = function () {        var instance = this;        var object = this.object;        for (var i in this.listen){            var action_element = this.listen[i].split(this.specialchars);            var action_event = action_element[action_element.length-1].trim();            var index = this.listen[i].lastIndexOf(this.specialchars);            var event_action = this.listen[i].substring(0, index).trim();            switch (action_event){                case 'check':                    document.addEventListener(event_action, function(event) {                        object.prop('checked',true);                    });                    break;                case 'un_check':                    document.addEventListener(event_action, function(event) {                        object.prop('checked',false);                    });                    break;                case 'disable':                    document.addEventListener(event_action, function(event) {                        object.prop('disabled',true);                    });                    break;                case 'enable':                    document.addEventListener(event_action, function(event) {                        object.prop('disabled',false);                    });                    break;                case 'show':                    document.addEventListener(event_action, function(event) {                        object.show();                    });                    break;                case 'hide':                    document.addEventListener(event_action, function(event) {                        object.hide();                    });                    break;                case 'empty':                    document.addEventListener(event_action, function(event) {                        object.val('');                    });                    break;                case 'set_attr':                    document.addEventListener(event_action, function(event) {                        var attr = object.attr('attr').split(',');                        object.attr(attr[0],attr[1]);                    });                    break;                case 'toggle_attr':                    document.addEventListener(event_action, function(event) {                        var attr = event.detail.attr('attr').split(',');                        if(object.attr(attr[0]) == attr[1]){                            object.attr(attr[0],'');                        }else{                            object.attr(attr[0],attr[1]);                        }                    });                    break;                case 'remove_attr':                    document.addEventListener(event_action, function(event) {                        var attr = object.attr('attr').split(',');                        object.removeAttr(attr[0]);                    });                    break;                case 'fill':                    document.addEventListener(event_action, function(event) {                        if(object.is('input') || object.is('textarea')){                            object.val(event.detail.val());                        }else{                            object.text(event.detail.val());                        }                    });                    break;            };            for(x in this.function){                if(this.function[x].name == action_event){                    var func = this;                    this.function[x].loop += event_action + ',';                    document.addEventListener(event_action, function(event) {                        for (i in func.function){                            var loop = func.function[i].loop.split(',');                            for (a in loop){                                if((loop[a] != '') && (loop[a] == event.type)){                                    func.function[i].condition.apply({listen:object,create:event.detail});                                }                            }                        }                    });                    break;                }            }        }    };};// class proccess DOM htmlvar event_component = function(){    this.on_load            = false;    this.default            = 'change';    this.function_create    = [];    this.function_listen    = [];    this.array_action       = [];    this.array_action_group = [];    this.array_action_trigger   = [];    this.specialchars           = '__';    this.status_event           = null;    this.array_event_default    = ['mouseover','mouseout','click','change','keyup','keydown']; //array event default of Jquery    this.array_listen = [];    //set param config for class    this.config = function (config) {        this.on_load    = config['load'];    };    //add new create event funtion    this.add_create_event = function (name, action) {        this.function_create.push({name:name, action:action});    };    //add new listen event funtion    this.add_listen_event = function (name, action) {        this.function_listen.push({name:name, action:action});    };    //proccess DOM html and function in layout to params for Class event_create    this.create = function (element) {        var instance = this;        var array_action = this.array_action;        var actions = [];        var event = new event_create();        for(var i in instance.function_create){            event.set_function(instance.function_create[i]['name'], instance.function_create[i]['action']);        }        for (x in array_action){            var action = array_action[x].trim().split(instance.specialchars);            var id_event = null;            var class_event = null;            if(action[0].substring(0,1) === '#'){                id_event = action[0].substring(1);            }            if(action[0].substring(0,1) === '.'){                class_event = action[0].substring(1);            }            if($(element).attr('id') === id_event){                actions.push({name:'#'+id_event,action:action[1]});            }            if($(element).hasClass(class_event)){                actions.push({name:'.'+class_event,action:action[1]});            }        }        if($(element).is("select")){            for (x in array_action){                var action = array_action[x].trim().split(instance.specialchars);                var id_event = null;                var class_event = null;                if(action[0].substring(0,1) === '#'){                    id_event = action[0].substring(1);                }                if(action[0].substring(0,1) === '.'){                    class_event = action[0].substring(1);                }                if($(element).attr('id')+'_'+$(element).val().trim() === id_event){                    actions.push({name:'#'+id_event,action:action[1]});                }                if($(element).hasClass(class_event+'_'+$(element).val().trim())){                    actions.push({name:'.'+class_event,action:action[1]});                }            }        }        if(actions.length > 0){            event.set($(element), actions);            event.run();        }    };    //proccess DOM html and function in layout to params for Class event_listen    this.listen = function () {        var event = new event_listen();        var instance = this;        for(var i in this.function_listen){            event.set_function(this.function_listen[i]['name'], this.function_listen[i]['action']);        }        $("[listen]").each(function(index, element){            var dispatch = true;            for (x in instance.array_listen){                if(element == instance.array_listen[x]){                    dispatch = false;                }            }            if(dispatch && ($(element).attr('listen') != undefined)){                instance.array_listen.push(element);                var actions = $(element).attr('listen').split(',');                event.set($(element),actions);                event.run();            }        });    };    //proccess DOM html for event default    this.event_default = function () {        var instance = this;        var array_action = this.array_action;        $('*').each(function () {            var array_event = instance.array_event_default;            for (x in array_action) {                var action = array_action[x].trim().split(instance.specialchars);                var id_event = null;                var class_event = null;                if(action[0].substring(0,1) === '#'){                    id_event = action[0].substring(1);                }                if(action[0].substring(0,1) === '.'){                    class_event = action[0].substring(1);                }                if($(this).attr('id') === id_event){                    var i = 0;                    for (a in array_event) {                        if (action[1] === array_event[a]) {                            $('body').on(array_event[a],'#'+id_event,{name:'#'+id_event}, function (e) {                                console.log(e.data.name + instance.specialchars + e.type);                                document.dispatchEvent(new CustomEvent(e.data.name + instance.specialchars + e.type, {detail: $(this)}));                            });                            break;                        }                        i++;                    }                }                if($(this).hasClass(class_event)){                    var i = 0;                    for (a in array_event) {                        if (action[1] === array_event[a]) {                            $('body').on(array_event[a],'.'+class_event,{name:'.'+class_event}, function (e) {                                console.log(e.data.name + instance.specialchars + e.type);                                document.dispatchEvent(new CustomEvent(e.data.name + instance.specialchars + e.type, {detail: $(this)}));                            });                            break;                        }                        i++;                    }                }            }        });    };    //get infomation for array_action, array_action_group, array_action_trigger from DOM html    this.load_action = function () {        var instance = this;        var has_value = [];        $("[listen]").each(function(index, elem){            if($(elem).attr('listen') != undefined) {                var actions = $(elem).attr('listen').split(',');                for (e in actions) {                    var index = actions[e].lastIndexOf(instance.specialchars);                    var event_action = actions[e].substring(0, index).trim();                    if(actions[e].indexOf('(') == -1){                        var has_action = false;                        for (a in instance.array_action){                            if(event_action == instance.array_action[a]){                                has_action = true;                                break;                            }                        }                        if(!has_action && event_action != ''){                            instance.array_action.push(event_action);                        }                    }else{                        var has_action_group = false;                        for (a in instance.array_action_group){                            if(event_action == instance.array_action_group[a].action){                                has_action_group = true;                                break;                            }                        }                        if(!has_action_group){                            instance.array_action_group.push({name:elem, action:event_action});                        }                    }                }            }        });        for (a in instance.array_action){            var elem_split = instance.array_action[a].split(instance.specialchars);            if(elem_split[1] != undefined){                var array_event = instance.array_event_default;                var push_data = true;                for (a in array_event){                    if(elem_split[1] == array_event[a]){                        var push_data = false;                        instance.array_action_trigger.push({name:elem_split[0],action:elem_split[1]});                        break;                    }                }                if(push_data){                    var push_change = true;                    for (x in has_value){                        if(elem_split[0] == has_value[x]){                            push_change = false;                            break;                        }                    }                    if(push_change){                        instance.array_action_trigger.push({name:elem_split[0],action:this.default});                        has_value.push(elem_split[0]);                    }                }            }        }        for (a in instance.array_action_group){            var array_explode = instance.explode(instance.array_action_group[a].action);            this.array_explode(array_explode, has_value);        }    };    //process for group support for function :load_action    this.array_explode = function (array_split, value) {        var has_value = value;        for (x in array_split){            if(Array.isArray(array_split[x][1])){                this.array_explode(array_split[x][1],has_value);            }else{                var elem_split = array_split[x][1].split(this.specialchars);                if(elem_split[1] != undefined){                    var array_event = this.array_event_default;                    var push_data = true;                    for (a in array_event){                        if(elem_split[1] == array_event[a]){                            var push_data = false;                            this.array_action_trigger.push({name:elem_split[0],action:elem_split[1]});                            break;                        }                    }                    if(push_data){                        var push_change = true;                        for (x in has_value){                            if(elem_split[0] == has_value[x]){                                push_change = false;                                break;                            }                        }                        if(push_change){                            var name = elem_split[0];                            if(elem_split[1] == 'choose'){                                var index = name.lastIndexOf('_');                                var name = name.substring(0,index);                            }                            this.array_action_trigger.push({name:name,action:this.default});                            has_value.push(elem_split[0]);                        }                    }                }            }        }    };    //dispatch group event    this.dispatch_group = function (array_action, event_current) {        var instance = this;        for (elem in array_action) {            if (array_action[elem].action.indexOf('(') != -1) {                var action_split = instance.explode(array_action[elem].action);                var status = instance.compare(action_split);                var of_event = instance.check_event(action_split, event_current);                if (status == true && of_event) {                    console.log(array_action[elem].action);                    event_current.push(array_action[elem].name);                    document.dispatchEvent(new CustomEvent(array_action[elem].action));                    array_action.splice(elem, 1);                    this.dispatch_group(array_action, event_current);                }            }        }    };    //check dispatch event group    this.check_event = function (action_split, event_current) {        if(event_current != undefined){            for (var i = 0; i < action_split.length; i++) {                if (Array.isArray(action_split[i][1])) {                    if(this.check_event(action_split[i][1], event_current)){                        return true;                    }                } else {                    var elem_object = action_split[i][1].split(this.specialchars);                    var name = elem_object[0].substring(1,elem_object[0].length);                    for (a in event_current){                        if($(event_current[a]).attr('id') == name){                            return true;                        }                        if($(event_current[a]).hasClass(name)){                            return true;                        }                        if(elem_object[1] == 'choose'){                            var index = name.lastIndexOf('_');                            var select = name.substring(0,index);                            var option = name.substring(index + 1);                            if($(event_current[a]).is('select') && ($(event_current[a]).val() == option)){                                return true;                            }                        }                    }                }            }        }        return false;    };    //convert string group event to array    this.explode = function (string) {        var event_arr = [];        var string = string.substring(1, string.length);        string = string.substring(0, string.length - 1);        var find1 = 0;        var find2 = 0;        while (string != ""){            find1 = string.indexOf("&&");            find2 = string.indexOf("||");            if((find1 != -1) && (find2 != -1) && (find1 < find2) || ((find1 != -1) && (find2 == -1))){                if(string.substr(0,1) == "("){                    find1 = string.indexOf(")");                    var substring = string.substr(0,find1+1).trim();                    var sub_array = this.explode(substring);                    event_arr.push(["&&",sub_array]);                    string = string.substr(find1+2,string.length).trim();                    var pos = string.indexOf("&&");                    string = string.substr(pos+2,string.length).trim();                }else{                    var substring = string.substr(0,find1).trim();                    event_arr.push(["&&",substring]);                    string = string.substr(find1+2,string.length).trim();                }            }            if((find1 != -1) && (find2 != -1) && (find1 > find2) || ((find1 == -1) && (find2 != -1))){                if(string.substr(0,1) == "("){                    find2 = string.indexOf(")");                    var substring = string.substr(0,find2+1).trim();                    var sub_array = this.explode(substring);                    event_arr.push(["||",sub_array]);                    string = string.substr(find2+2,string.length).trim();                    var pos = string.indexOf("||");                    string = string.substr(pos+2,string.length).trim();                }else {                    var substring = string.substr(0, find2).trim();                    event_arr.push(["||", substring]);                    string = string.substr(find2 + 2, string.length).trim();                }            }            if((find1 == -1) && (find2 == -1)){                event_arr.push(['',string]);                string = '';            }        }        return event_arr;    };    //compare element in group    this.compare = function (array_compare) {        var status = null;        if (array_compare.length == 1) {            return this.status(array_compare[0][1]);        }else{            for (var i = 0; i < array_compare.length - 1; i++) {                var condition = array_compare[i][0];                var status_compare = false;                if (status == null) {                    if (Array.isArray(array_compare[i][1])) {                        var status = this.compare(array_compare[i][1]);                    } else {                        var status = this.status(array_compare[i][1]);                    }                }                if (Array.isArray(array_compare[i + 1][1])) {                    var status_compare = this.compare(array_compare[i + 1][1]);                } else {                    var status_compare = this.status(array_compare[i + 1][1]);                }                if (condition == "&&") {                    status = (status && status_compare);                } else {                    status = (status || status_compare);                }            }        }        return status;    };    //ckeck status element in group    this.status = function (object) {        var instance = this;        var array_event = instance.array_event_default;        var elem_object = object.split(instance.specialchars);        var action = elem_object[1];        for(var i in this.function_create){            if(action == this.function_create[i]['name'] && this.function_create[i].action.apply({create:$(elem_object[0])}) == true){                return true;            }        }        for (a in array_event){            if(action == array_event[a]){                if(instance.status_event == elem_object[0]+instance.specialchars+action){                    return true;                }            }        }        return this.check_status(elem_object[0], action);    };    //define function ckeck status in group    this.check_status = function (name, action) {        if(action == 'check' && $(name).is(':checked')){            return true;        }        if(action == 'un_check' && !$(name).is(':checked') ){            return true;        }        if(action == 'enable' && !$(name).is(':disabled') ){            return true;        }        if(action == 'disable' && $(name).is(':disabled')){            return true;        }        if(action == 'show' && $(name).is(':visible')){            return true;        }        if(action == 'hide' && $(name).is(':hidden')){            return true;        }        if(action == 'empty'){            if($(name).is('input') || $(name).is('select') || $(name).is('textarea')){                return ($(name).val().trim() == '');            }else{                return ($(name).text().trim() == '');            }        }        if(action == 'has_value'){            if($(name).is('input') || $(name).is('select') || $(name).is('textarea')){                return ($(name).val().trim() != '');            }else{                return ($(name).text().trim() != '');            }        }        if(action == 'choose'){            var index = name.lastIndexOf('_');            var select = name.substring(0,index);            var option = name.substring(index + 1);            if($(select).is('select') && ($(select).val() == option)){               return true;            }        }        return false;    };    //run event component    this.run = function() {        var instance = this;        $(document).ready( function() {            instance.load_action();            instance.listen();            instance.event_default();            if(instance.on_load == true){                $('*').each(function () {                    instance.create(this);                });            };            instance.dispatch_group(instance.array_action_group);            $('*').each(function () {                for (key in instance.array_action_trigger){                    var id_event = null;                    var class_event = null;                    if(instance.array_action_trigger[key].name.substring(0,1) == '#'){                        id_event = instance.array_action_trigger[key].name.substring(1);                    }                    if(instance.array_action_trigger[key].name.substring(0,1) == '.'){                        class_event = instance.array_action_trigger[key].name.substring(1);                    }                    if($(this).attr('id') === id_event){                        $('body').on(instance.array_action_trigger[key].action,                            '#'+id_event,{name:'#'+id_event},function(event){                                event.stopPropagation();                                instance.status_event = event.data.name+instance.specialchars+event.type;                                instance.listen();                                instance.load_action();                                instance.create(this);                                var event_current = [];                                event_current.push(this);                                instance.dispatch_group(instance.array_action_group, event_current);                            });                    }                    if($(this).hasClass(class_event)){                        $('body').on(instance.array_action_trigger[key].action,                            '.'+class_event,{name:'.'+class_event},function(event){                                event.stopPropagation();                                instance.status_event = event.data.name+instance.specialchars+event.type;                                instance.listen();                                instance.load_action();                                instance.create(this);                                var event_current = [];                                event_current.push(this);                                instance.dispatch_group(instance.array_action_group, event_current);                            });                    }                }            });        });    };}